# Copyright (c) 2014-2015 Arduino LLC.  All right reserved.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

# Arduino SAMD Core and platform.
#
# For more info:
# https://github.com/arduino/Arduino/wiki/Arduino-IDE-1.5---3rd-party-Hardware-specification

name=Custom Blackfin boards
version=0.0.1

# Compile variables
# -----------------

compiler.warning_flags=-w
compiler.warning_flags.none=-w
compiler.warning_flags.default=
compiler.warning_flags.more=-Wall
compiler.warning_flags.all=-Wall -Wextra

compiler.path={runtime.platform.path}/toolchain/bin/
compiler.c.cmd=bfin-elf-gcc
compiler.c.flags=-mcpu={build.mcu} -c {compiler.warning_flags} -std=gnu11 -g -O2 -ffunction-sections -fdata-sections -nostdlib --param max-inline-insns-single=500 -MMD
compiler.c.elf.cmd=bfin-elf-gcc
compiler.c.elf.flags=
compiler.S.cmd=bfin-elf-gcc
compiler.S.flags=-c -g -x assembler-with-cpp -mcpu={build.mcu} -MMD -D__ASSEMBLY__
compiler.cpp.cmd=bfin-elf-g++
compiler.cpp.flags=-mcpu={build.mcu} -c {compiler.warning_flags} -std=gnu++11 -g -fno-rtti -ffunction-sections -fdata-sections -fno-threadsafe-statics -nostdlib -O2 --param max-inline-insns-single=500 -MMD
compiler.ar.cmd=bfin-elf-ar
compiler.ar.flags=rcs
compiler.objcopy.cmd=bfin-elf-objcopy
compiler.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0
compiler.ldflags=-mcpu={build.mcu} -Wl,--cref
compiler.size.cmd=bfin-elf-size
compiler.define=-DARDUINO=
compiler.readelf.cmd=bfin-elf-readelf
compiler.elf2hex.cmd=bfin-ldr
compiler.elf2hex.ldr.flags=--target={build.mcu} -c -J -d 3

# this can be overriden in boards.txt
build.extra_flags=

# These can be overridden in platform.local.txt
compiler.c.extra_flags=
compiler.c.elf.extra_flags=
#compiler.c.elf.extra_flags=-v
compiler.cpp.extra_flags=
compiler.S.extra_flags=
compiler.ar.extra_flags=
compiler.elf2hex.extra_flags=

compiler.bfin.cmsis.c.flags="-I{runtime.platform.path}/bfin-CMSIS"

# Compile patterns
# ----------------

## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {compiler.bfin.cmsis.c.flags} {includes} "{source_file}" -o "{object_file}"

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {compiler.bfin.cmsis.c.flags} {includes} "{source_file}" -o "{object_file}"

## Compile S files
recipe.S.o.pattern="{compiler.path}{compiler.S.cmd}" {compiler.S.flags} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.S.extra_flags} {build.extra_flags} {compiler.bfin.cmsis.c.flags} {includes} "{source_file}" -o "{object_file}"

## Create archives
# archive_file_path is needed for backwards compatibility with IDE 1.6.5 or older, IDE 1.6.6 or newer overrides this value
archive_file_path={build.path}/{archive_file}
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{archive_file_path}" "{object_file}"

## Combine gc-sections, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.c.elf.cmd}"  "-L{build.path}" {compiler.c.elf.flags} {compiler.c.elf.extra_flags} "-T{build.variant.path}/{build.ldscript}" "-Wl,-Map,{build.path}/{build.project_name}.map" --specs=nosys.specs {compiler.ldflags} -o "{build.path}/{build.project_name}.elf" {object_files} "-L{build.variant.path}" -lm "{build.path}/{archive_file}"

## Create output (ldr file)
recipe.objcopy.ldr.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.ldr.flags} {compiler.elf2hex.extra_flags} "{build.path}/{build.project_name}.ldr" "{build.path}/{build.project_name}.elf"


build.preferred_out_format=ldr

## Save hex
recipe.output.tmp_file={build.project_name}.{build.preferred_out_format}
recipe.output.save_file={build.project_name}.{build.variant}.{build.preferred_out_format}

## Compute size
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}.elf"
recipe.size.regex=\.text\s+([0-9]+).*

# Uploader tools
# --------------

#
# BOSSA
#
tools.bossac.path={runtime.platform.path}/tools/
tools.bossac.cmd=bossac_linux
tools.bossac.cmd.windows=bossac.exe
tools.bossac.cmd.linux=bossac_linux
#tools.bossac.cmd.macosx=bossac_osx

tools.bossac.upload.params.verbose=-i -d
tools.bossac.upload.params.quiet=
tools.bossac.upload.pattern="{path}/{cmd}" {upload.verbose} --port={serial.port.file} -U -i --offset={upload.offset} --maxsize={upload.maximum_size} -e -w "{build.path}/{build.project_name}.ldr" -R

tools.bossac_remote.upload.pattern=/usr/bin/run-bossac {upload.verbose} --port=ttyATH0 -U {upload.native_usb} -e -w /tmp/sketch.ldr -R

tools.bossac.network_cmd={runtime.tools.arduinoOTA.path}/bin/arduinoOTA
tools.bossac.upload.network_pattern="{network_cmd}" -address {serial.port} -port 65280 -username arduino -password "{network.password}" -sketch "{build.path}/{build.project_name}.ldr" -upload /sketch -b

#
# OpenOCD sketch upload
#

tools.openocd.path={runtime.platform.path}/toolchain/
tools.openocd.cmd=bin/openocd
tools.openocd.cmd.windows=bin/openocd.exe

tools.openocd.upload.params.verbose=-d2
tools.openocd.upload.params.quiet=-d0
tools.openocd.upload.pattern="{path}/{cmd}" {upload.verbose} -s "{path}/share/openocd/scripts/" -f "{runtime.platform.path}/variants/{build.variant}/{build.openocdscript}" -c "telnet_port disabled; load_bootloader {{runtime.platform.path}/bootloaders/{bootloader.file}}; flash write_image {{build.path}/{build.project_name}.ldr} 0 bin; shutdown"

tools.openocd.network_cmd={runtime.tools.arduinoOTA.path}/bin/arduinoOTA
tools.openocd.upload.network_pattern={network_cmd} -address {serial.port} -port 65280 -username arduino -password "{network.password}" -sketch "{build.path}/{build.project_name}.bin" -upload /sketch -b

tools.openocd.erase.params.verbose=-d3
tools.openocd.erase.params.quiet=-d0
tools.openocd.erase.pattern=

tools.openocd.bootloader.params.verbose=-d2
tools.openocd.bootloader.params.quiet=-d0

tools.openocd.bootloader.pattern="{path}/{cmd}" {bootloader.verbose} -s "{path}/share/openocd/scripts/" -f "{runtime.platform.path}/variants/{build.variant}/{build.openocdscript}" -c "telnet_port disabled; init; halt; at91samd bootloader 0; program {{{runtime.platform.path}/bootloaders/{bootloader.file}}} verify reset; shutdown"

#
# OpenOCD sketch upload into ram
#

tools.openocd-ram.path={runtime.platform.path}/toolchain/
tools.openocd-ram.cmd=bin/openocd
tools.openocd-ram.cmd.windows=bin/openocd.exe

tools.openocd-ram.upload.params.verbose=-d2
tools.openocd-ram.upload.params.quiet=-d0
tools.openocd-ram.upload.pattern="{path}/{cmd}" {upload.verbose} -s "{path}/share/openocd/scripts/" -f "{runtime.platform.path}/variants/{build.variant}/{build.openocdscript}" -c "telnet_port disabled; init; reset init; load_image {{build.path}/{build.project_name}.elf} 0 elf; reg 52 0x11a00000; resume; shutdown"

tools.openocd-ram.network_cmd={runtime.tools.arduinoOTA.path}/bin/arduinoOTA
tools.openocd-ram.upload.network_pattern={network_cmd} -address {serial.port} -port 65280 -username arduino -password "{network.password}" -sketch "{build.path}/{build.project_name}.bin" -upload /sketch -b


tools.openocd-ram.erase.params.verbose=-d3
tools.openocd-ram.erase.params.quiet=-d0
tools.openocd-ram.erase.pattern=

tools.openocd-ram.bootloader.params.verbose=-d2
tools.openocd-ram.bootloader.params.quiet=-d0

tools.openocd-ram.bootloader.pattern="{path}/{cmd}" {bootloader.verbose} -s "{path}/share/openocd/scripts/" -f "{runtime.platform.path}/variants/{build.variant}/{build.openocdscript}" -c "telnet_port disabled; init; halt; at91samd bootloader 0; program {{{runtime.platform.path}/bootloaders/{bootloader.file}}} verify reset; shutdown"

